<root>

    <struct name="LightColor">
        vec4 diffuse;
        vec4 ambient;
        vec4 specular;
    </struct>

    <struct name="Material">
        vec3 diffuse;
        vec3 ambient;
        vec4 specular;
    </struct>

<!--     https://learnopengl.com/code_viewer_gh.php?code=src/2.lighting/6.multiple_lights/6.multiple_lights.fs -->

<code><![CDATA[
vec3 ApplyDirectionLight(DirectionLight light,LightColor color,in vec3 normal)
{
    float intensity=max(dot(normal,light.direction),0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    return max(intensity*color.diffuse,
                         color.ambient);
}

vec3 ApplyPointLight(PointLight light,LightColor color,in vec3 normal,in vec3 pos)
{
    vec3 lightDir=normalize(light.pos-pos);

    float diff=max(dot(normal,lightDir),0.0);

    float distance=length(light.pos-pos);

    float attenuation=1.0/( light.constant +
                            light.linear * distance +
                            light.quadratic * (distance * distance));

    return  (color.ambient
            +color.diffuse *diff)*attenuation;
}

vec3 ApplySpotLight(SpotLight light,LightColor color,in vec3 normal,in vec3 pos)
{
    vec3 lightDir=normalize(light.pos-pos);

    float diff=max(dot(normal,lightDir),0.0);

    float distance=length(light.pos-pos);

    float attenuation=1.0/( light.constant +
                            light.linear * distance +
                            light.quadratic * (distance * distance));

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cut_off - light.outer_cut_off;
    float intensity = clamp((theta - light.outer_cut_off) / epsilon, 0.0, 1.0);

    return  (color.ambient
            +color.diffuse *diff)*attenuation*itensity;
}
]]></code>
</root>

<root>
    <in>position2f</in>
    <out>FragColor</out>
    <uniform>
        WorldMatrix world;
        sampler2D GB_Color;
        sampler2D GB_Normal;
        sampler2D GB_Depth;
        PhongPointLight lights;
    </uniform>
    <raw>
        normal2to3
        PushConstant3D
    </raw>

    <main><![CDATA[

        float depth=texture(GB_Depth,Position).r;

        vec4 clip=vec4(gl_FragCoord.xy*world.inv_viewport_resolution*2.0-1.0,depth,1.0);
        vec4 world_w=world.inverse_mvp*clip;

        vec3 world_pos=world_w.xyz/world_w.w;

        vec3 normal =normal2to3(texture(GB_Normal,  Position).xy);
        vec3 color  =           texture(GB_Color,   Position).xyz;

        vec3 fragcolor=color*0.3;

            // vector to light
            vec3 L=lights.position.xyz-world_pos;

            // distance from light to fragment position
            float dist=length(L);

            // viewer to fragment
            vec3 V=normalize(world.view_pos-world_pos);

            // light to fragment
            L=normalize(L);

            // attenuation
            float atten=lights.radius/(pow(dist,2.0)+1.0);

            //diffuse part
            vec3 N=normal;
            float NdotL = max(0.0, dot(N, L));
            vec3 diff = lights.color.rgb * color * NdotL * atten;

            // Specular part
            // Specular map values are stored in alpha of albedo mrt
            vec3 R = reflect(-L, N);
            float NdotR = max(0.0, dot(R, V));
            vec3 spec = lights.color.rgb * pow(NdotR, 16.0) * atten;

            fragcolor += diff + spec;

        FragColor=vec4(fragcolor,1.0);
    ]]></main>
</root>
